import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# === –°–û–°–¢–û–Ø–ù–ò–Ø –ò–ì–†–´ ===
user_states = {}  # {user_id: {"chapter": "chapter_1"}}

# === –ö–ù–û–ü–ö–ò ===
def get_keyboard(options):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(text, callback_data=f"choice_{i}")]
        for i, text in enumerate(options)
    ])

# === /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_states[user_id] = {"chapter": "chapter_1"}

    title = "üåÖ –£—Ç—Ä–æ –≤ –∫–ª–µ—Ç–∫–µ"
    text = ("–¢—ã ‚Äî –ì–≤–∏–Ω—Ç–∏, –æ–±—ã—á–Ω–∞—è, –Ω–æ –æ—á–µ–Ω—å –ª—é–±–æ–ø—ã—Ç–Ω–∞—è –º–æ—Ä—Å–∫–∞—è —Å–≤–∏–Ω–∫–∞.\n"
            "–•–æ–∑—è–∏–Ω —É—à—ë–ª –Ω–∞ —Ä–∞–±–æ—Ç—É. –ü–µ–ø–ø–∞ –µ—â—ë —Å–ø–∏—Ç.\n\n–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?")
    options = [
        "üåø –°—ä–µ—Å—Ç—å —Å–µ–Ω–æ –∏ –Ω–∞—á–∞—Ç—å –¥–µ–Ω—å —Å —Å–∏–ª–æ–π!",
        "üîç –û—Å–º–æ—Ç—Ä–µ—Ç—å –∫–ª–µ—Ç–∫—É ‚Äî –≤–¥—Ä—É–≥ –≥–¥–µ-—Ç–æ —Å–ø—Ä—è—Ç–∞–Ω —Å–µ–∫—Ä–µ—Ç?",
        "üí§ –ü–æ–≤–µ—Ä–Ω—É—Ç—å—Å—è –∏ –ø–æ—Å–ø–∞—Ç—å –µ—â—ë —á–∞—Å–æ–∫.",
        "üó£Ô∏è –†–∞–∑–±—É–¥–∏—Ç—å –ü–µ–ø–ø—É –∏ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å."
    ]

    await update.message.reply_text(
        f"<b>{title}</b>\n\n{text}",
        reply_markup=get_keyboard(options),
        parse_mode='HTML'
    )

# === –û–ë–†–ê–ë–û–¢–ö–ê –í–´–ë–û–†–ê ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    if user_id not in user_states:
        await query.edit_message_text("–ò–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞. –ù–∞—á–Ω–∏ —Å /start", reply_markup=None)
        return

    current_chapter = user_states[user_id]["chapter"]
    try:
        choice = int(query.data.split("_")[1])
    except (IndexError, ValueError):
        return

    # === –ì–ª–∞–≤–∞ 1 ‚Üí –ì–ª–∞–≤–∞ 2 (—Å–æ–Ω) ===
    if current_chapter == "chapter_1" and choice == 2:
        user_states[user_id]["chapter"] = "chapter_2_sleep"
        await chapter_2_sleep(query)

    # –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å ‚Äî –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º —Ç–∞–∫
    else:
        await query.edit_message_text(
            "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è... (–∏–≥—Ä–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)",
            reply_markup=get_keyboard(["–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"])
        )

# === –ü—Ä–∏–º–µ—Ä —Å–ª–µ–¥—É—é—â–µ–π —Å—Ü–µ–Ω—ã ===
async def chapter_2_sleep(query):
    text = ("üí§ –¢—ã —Ä–µ—à–∞–µ—à—å –ø–æ—Å–ø–∞—Ç—å‚Ä¶\n–ù–æ –≤–¥—Ä—É–≥ ‚Äî —à—É—Ä—à-—à—É—Ä—à‚Ä¶\n\n"
            "–ü–µ–ø–ø–∞ —à–µ–ø—á–µ—Ç: *¬´–ì–≤–∏–Ω—Ç–∏! –Ø –≤–∏–¥–µ–ª–∞, –∫–∞–∫ —Ç—É–¥–∞ –ø—Ä–æ–ª–µ–∑–ª–∞ –º—ã—à—å!¬ª*\n\n"
            "–ß—Ç–æ –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å?")
    options = [
        "üß± –ó–∞–¥–µ–ª–∞—Ç—å –¥—ã—Ä—É",
        "üê≠ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å!"
    ]
    await query.edit_message_text(
        f"<b>üï≥Ô∏è –®—É—Ä—à-—à—É—Ä—à‚Ä¶</b>\n\n{text}",
        reply_markup=get_keyboard(options),
        parse_mode='HTML'
    )

# === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===
if __name__ == '__main__':
    TOKEN = "YOUR_TOKEN_HERE"  # Render –ø–æ–¥—Å—Ç–∞–≤–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Render!")
    app.run_polling()
